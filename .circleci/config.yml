version: 2.1

parameters:
  coil_domain:
    type: enum
    default: "https://coil.com"
    enum: ["https://coil.com", "https://staging.coil.com"]

commands:
  gcloud-get-creds: 
    description: 'Get deploy credentials to Google Cloud'
    steps:
      - run:
          name: 'Getting deploy credentials'
          command: |
            sudo apt-get install apt-transport-https ca-certificates gnupg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk
            DEPLOY_KEY=$GCLOUD_UPLOAD_BUCKET_CREDENTIALS
            PROJECT="exalted-beanbag-213300"
            ENVIRONMENT=staging
            echo $DEPLOY_KEY > $HOME/gcp-key.json
            gcloud auth activate-service-account --key-file $HOME/gcp-key.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="$HOME/gcp-key.json"' >> $BASH_ENV

references:
  parameterized-node-version: &parameterized-node-version
    parameters:
      node-version:
        type: string
    docker:
      - image: circleci/node:<< parameters.node-version >>-buster-browsers
  node-version-matrix: &node-version-matrix
    matrix:
      parameters:
        node-version: [ "14", "16" ]
  just-one-node-version-matrix: &just-latest-lts-node-version
    matrix:
      parameters:
        node-version: [ "16" ]

jobs:
  # Run Linting
  lint-all:
    <<: *parameterized-node-version
    steps:
      - checkout
      # Download and cache dependencies
      - &restore_cache
#        run:
#         name: Restore Cache Dummy
#         command: |
#           echo Restore Cache Dummy!
        restore_cache:
          keys:
            - v5-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
      - &yarn_install
        run:
          name: Yarn Install
          command: |
            yarn --immutable
            export PUPPETEER_PRODUCT='firefox'
            yarn rebuild puppeteer
      - run:
          name: Lint Project
          command: |
            # show only errors with --quiet
            yarn lint:all --quiet
      - &save_cache
        save_cache:
          paths:
          - node_modules
          - .yarn
          - pw-browsers
          key: v5-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

  coil-extension-package:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Package for firefox
          command: |
            cd packages/coil-extension
            ./package.sh firefox
      - run:
          name: Package for chrome
          command: |
            cd packages/coil-extension
            ./package.sh chrome
      - run:
          name: Lint firefox package
          command: |
            cd packages/coil-extension
            yarn addons-linter coilfirefoxextension@coil.com.xpi
      - *save_cache

  build-extension-e2e-coil:
    docker:
      - image: circleci/node:16-buster-browsers
    steps:
      - gcloud-get-creds
      - checkout
      - run:
          name: Publish staging extension for coil e2e tests
          command: |
            yarn
            cd packages/coil-extension
            yarn build-staging
            mkdir /tmp/coil-chrome-ext-e2e-staging
            tar -cvzf /tmp/coil-chrome-ext-e2e-staging/chromeext.tar dist
            gsutil cp /tmp/coil-chrome-ext-e2e-staging/chromeext.tar gs://web-monetization-projects/extension/latest.tar
      
  publish-packages:
    docker:
      - image: circleci/node:14-buster-browsers
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Configure NPM authentication
          command: |
            yarn config set "npmRegistries['https://registry.yarnpkg.com'].npmAuthToken" "$NPM_AUTH_TOKEN" -H
      - run:
          name: Build the webmonetization-types package
          command: |
            cd packages/webmonetization-types
            yarn build:ts:verbose
      - run:
          name: Publish the webmonetization-types package
          command: |
            cd packages/webmonetization-types
            yarn npm publish --access public
      - *save_cache

  coil-extension-puppeteer:
    <<: *parameterized-node-version
    environment:
      COIL_DOMAIN: << pipeline.parameters.coil_domain >>
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: BROWSER_TYPE=chrome ./test.sh test/puppeteer/{logout,multiple-tags}-test.ts
          command: |
            cd packages/coil-extension
            export BROWSER_TYPE=chrome
            [[ $COIL_DOMAIN = "https://coil.com" ]] && build_cmd="build-prod" || build_cmd="build-staging"
            yarn $build_cmd $BROWSER_TYPE
            xvfb-run -a ./test.sh test/puppeteer/logout-test.ts
            xvfb-run -a ./test.sh test/puppeteer/multiple-tags-test.ts
     # Firefox puppeteer was not working at one point and it's on the TODO to reinstate
      # - run:
      #     name: BROWSER_TYPE=firefox test.sh test/puppeteer/logout-test.ts
      #     command: |
      #       cd packages/coil-extension
      #       export PUPPETEER_PRODUCT='firefox'
      #       yarn rebuild puppeteer
      #       export BROWSER_TYPE=firefox
      #       [[ $COIL_DOMAIN = "https://coil.com" ]] && build_cmd="build-prod" || build_cmd="build-staging"
      #       yarn $build_cmd $BROWSER_TYPE
      #       xvfb-run -a ./test.sh test/puppeteer/logout-test.ts
      # - *save_cache

  # There have been and likely will be again issues that only surface in transpileOnly mode,
  # so we test this specifically and separately.
  coil-extension-puppeteer-transpile-only:
    # It may be overkill, but the jobs are run in parallel, so it doesn't generally slow
    # anyone down and sometimes provides extra data points. There have been regressions
    # introduced in dependencies that only show up on particular versions of node.

    # A shameful thing to say, but when tests are flakey (as e2e tests are bound to be
    # when they touch live servers), it's helpful to have multiple runs for more data points
    # so the node matrix is helpful again.
    <<: *parameterized-node-version
    environment:
      COIL_DOMAIN: << pipeline.parameters.coil_domain >>
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: BROWSER_TYPE=chrome ./test.sh test/puppeteer/{logout,multiple-tags}-test.ts
          command: |
            cd packages/coil-extension
            export BROWSER_TYPE=chrome
            [[ $COIL_DOMAIN = "https://coil.com" ]] && build_cmd="build-prod" || build_cmd="build-staging"
            BUILD_TS=false TS_LOADER_TRANSPILE_ONLY=true yarn $build_cmd $BROWSER_TYPE
            xvfb-run -a ./test.sh test/puppeteer/logout-test.ts
            xvfb-run -a ./test.sh test/puppeteer/multiple-tags-test.ts

      # - run:
      #     name: BROWSER_TYPE=firefox test.sh test/puppeteer/logout-test.ts
      #     command: |
      #       cd packages/coil-extension
      #       export PUPPETEER_PRODUCT='firefox'
      #       yarn rebuild puppeteer
      #       export BROWSER_TYPE=firefox
      #       [[ $COIL_DOMAIN = "https://coil.com" ]] && build_cmd="build-prod" || build_cmd="build-staging"
      #       BUILD_TS=false TS_LOADER_TRANSPILE_ONLY=true yarn $build_cmd $BROWSER_TYPE
      #       xvfb-run -a ./test.sh test/puppeteer/logout-test.ts
      # - *save_cache

  build-all-package-references-typescript:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Build Root TypeScript Project - tsconfig.build.json
          command: |
            yarn build:ts --verbose
      - *save_cache

  # This builds the root tsconfig that the IDE uses and the tests are run under.
  # Make sure there are no issues here that somehow other jobs haven't captured.
  # This has been a problem in the past and could be again.
  build-root-tsconfig:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Build Root TypeScript Project - tsconfig.json
          command: |
            yarn tsc -b tsconfig.json --verbose
      - *save_cache

  jest-all:
    parameters:
      command:
        type: string
        default: test:coverage
      node-version:
        type: string
    docker:
      - image: circleci/node:<< parameters.node-version >>-buster-browsers
    resource_class: large
    steps:
      - run:
          name: echo TESTING_ENV_VAR $TESTING_ENV_VAR should be masked
          command: echo TESTING_ENV_VAR $TESTING_ENV_VAR
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Run jest via dynamic compilation
          command: |
            export DEBUG='coil*'
            export TS_JEST_MAP_PATHS_TO_MODULES=true
            xvfb-run -a yarn << parameters.command >>
      - run:
          name: Run jest from build
          command: |
            export DEBUG='coil*'
            yarn clean:build || echo "already clean"
            yarn build:ts:verbose
            export TS_JEST_MAP_PATHS_TO_MODULES=false
            xvfb-run -a yarn << parameters.command >>
      - *save_cache

  jest-lerna-all:
    parameters:
      command:
        type: string
        default: test:coverage
      node-version:
        type: string
    docker:
      - image: circleci/node:<< parameters.node-version >>-buster-browsers
    resource_class: xlarge
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Lerna run jest via dynamic compilation
          command: |
            export TS_JEST_MAP_PATHS_TO_MODULES=true
            xvfb-run -a yarn lerna run --stream << parameters.command >>
      - run:
          name: Lerna run jest from build
          command: |
            yarn clean:build || echo "already clean"
            yarn build:ts:verbose
            export TS_JEST_MAP_PATHS_TO_MODULES=false
            xvfb-run -a yarn lerna run --stream << parameters.command >>
      - *save_cache

  packages-build-scripts:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Packages Build Scripts
          command: |
            yarn lerna run --concurrency=1 --stream build
      - *save_cache

  yarn-format-and-upkeep-diff-check:
    <<: *parameterized-node-version
    steps:
      - run:
          name: echo TESTING_ENV_VAR $TESTING_ENV_VAR should be empty
          command: echo TESTING_ENV_VAR $TESTING_ENV_VAR
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          name: Yarn Dedupe Check
          command: |
            yarn dedupe --check
      - run:
          name: yarn dlx @yarnpkg/sdks vscode
          command: |
            yarn dlx @yarnpkg/sdks vscode
            git diff --exit-code -- . ':!yarn.lock' ':!.pnp.cjs'
      - run:
          name: Yarn format git diff --exit-code
          command: |
            yarn format
            yarn upkeep
            # yarn.lock sometimes (rarely) changes for unknown reasons
            # perhaps different versions of yarn ??
            # we don't *really* care so exclude it from the diff check
            git diff --exit-code -- . ':!yarn.lock' ':!.pnp.cjs'
      - *save_cache

workflows:
  version: 2
  build:
    jobs:
      - lint-all:
          <<: *node-version-matrix
      - yarn-format-and-upkeep-diff-check:
          <<: *node-version-matrix
      - build-all-package-references-typescript:
          <<: *node-version-matrix
      - build-root-tsconfig:
          <<: *just-latest-lts-node-version
      - coil-extension-package:
          <<: *node-version-matrix
      - packages-build-scripts:
          <<: *node-version-matrix
      - hold-publish-packages:
          type: approval
          filters:
            branches:
              only:
                - main
      - publish-packages:
          requires:
            - hold-publish-packages
          filters:
            branches:
              only:
                - main
      - jest-all:
          context: web-monetization-tests
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
          matrix:
            parameters:
              # TODO: DRY it up
              node-version: [ "14", "16" ]
              command: [ "test:coverage", "test:e2e:coverage" ]
      - jest-lerna-all:
          context: web-monetization-tests
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
          matrix:
            parameters:
              node-version: [ "14", "16" ]
              command: [ "test:coverage", "test:e2e:coverage" ]
      - coil-extension-puppeteer:
          context: web-monetization-tests
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
          <<: *node-version-matrix
      - coil-extension-puppeteer-transpile-only:
          context: web-monetization-tests
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
          <<: *node-version-matrix
      - build-extension-e2e-coil:
          requires:
            - jest-all
            - jest-lerna-all
            - coil-extension-puppeteer
            - coil-extension-puppeteer-transpile-only
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - main
