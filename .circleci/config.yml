version: 2.1

references:
  parameterized-node-version: &parameterized-node-version
    parameters:
      node-version:
        type: string
    docker:
      - image: cimg/node:<< parameters.node-version >>-browsers
  node-version-matrix: &node-version-matrix
    matrix:
      parameters:
        node-version: &node-versions [ "16.19.0", "18.4.0" ]
  just-one-node-version-matrix: &just-latest-lts-node-version
    matrix:
      parameters:
        node-version: [ "16.19.0" ]

jobs:
  # Run Linting
  lint-all:
    <<: *parameterized-node-version
    steps:
      - checkout
      - &restore_cache
        restore_cache:
          keys:
            - v6-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}-<< parameters.node-version >>
      - &yarn_install
        run:
          class: inner
          name: Yarn Install
          command: |
            export PUPPETEER_CACHE_DIR=$PWD/puppeteer-cache
            yarn --immutable
            export PUPPETEER_PRODUCT='firefox'
            yarn rebuild puppeteer
      - run:
          class: inner
          name: Lint Project
          command: |
            # show only errors with --quiet
            yarn lint:all --quiet
      - &save_cache
        save_cache:
          paths:
            - node_modules
            - .yarn
            - puppeteer-cache
          key: v6-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}-<< parameters.node-version >>

  # Build Safari
  build-safari:
    macos:
      xcode: 13.4.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - safari-build-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
      - *yarn_install
      - run:
          class: inner
          name: Build Safari
          command: |
            cd packages/coil-extension
            yarn build-prod safari
            scripts/build-safari.sh
      - save_cache:
          paths:
            - node_modules
            - .yarn
            - puppeteer-cache
          key: safari-build-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

  coil-extension-package:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Package for firefox
          command: |
            cd packages/coil-extension
            ./package.sh firefox
      - run:
          class: inner
          name: Package for chrome
          command: |
            cd packages/coil-extension
            ./package.sh chrome
      - run:
          class: inner
          name: Lint firefox package
          command: |
            cd packages/coil-extension
            yarn addons-linter coilfirefoxextension@coil.com.xpi
      - *save_cache

  build-all-package-references-typescript:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Build Root TypeScript Project - tsconfig.build.json
          command: |
            yarn build:ts --verbose
      - *save_cache

  # This builds the root tsconfig that the IDE uses and the tests are run under.
  # Make sure there are no issues here that somehow other jobs haven't captured.
  # This has been a problem in the past and could be again.
  build-root-tsconfig:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Build Root TypeScript Project - tsconfig.json
          command: |
            yarn tsc -b tsconfig.json --verbose
      - *save_cache

  jest-all:
    parameters:
      command:
        type: string
        default: test:coverage
      node-version:
        type: string
    docker:
      - image: cimg/node:<< parameters.node-version >>-browsers
    resource_class: large
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Run jest via dynamic compilation
          command: |
            export DEBUG='coil*'
            export TS_JEST_MAP_PATHS_TO_MODULES=true
            xvfb-run -a yarn << parameters.command >>
      - run:
          class: inner
          name: Run jest via babel
          command: |
            export DEBUG='coil*'
            export TS_JEST_MAP_PATHS_TO_MODULES=true
            cp jest.config.local.example.js jest.config.local.js 
            xvfb-run -a yarn << parameters.command >>
      - run:
          class: inner
          name: Run jest from build
          command: |
            export DEBUG='coil*'
            yarn clean:build || echo "already clean"
            yarn build:ts:verbose
            export TS_JEST_MAP_PATHS_TO_MODULES=false
            xvfb-run -a yarn << parameters.command >>
      - *save_cache

  jest-workspaces-foreach-all:
    parameters:
      command:
        type: string
        default: test:coverage
      node-version:
        type: string
    docker:
      - image: cimg/node:<< parameters.node-version >>-browsers
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Yarn workspaces foreach run jest via dynamic compilation
          command: |
            export TS_JEST_MAP_PATHS_TO_MODULES=true
            export PUPPETEER_CACHE_DIR=$PWD/puppeteer-cache
            xvfb-run -a yarn workspaces foreach -v --exclude=web-monetization run << parameters.command >>
      - run:
          class: inner
          name: Yarn workspaces foreach run jest from build
          command: |
            yarn clean:build || echo "already clean"
            yarn build:ts:verbose
            export TS_JEST_MAP_PATHS_TO_MODULES=false
            export PUPPETEER_CACHE_DIR=$PWD/puppeteer-cache
            xvfb-run -a yarn workspaces foreach -v --exclude=web-monetization run << parameters.command >>
      - *save_cache

  packages-build-scripts:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Packages Build Scripts
          command: |
            yarn workspaces foreach -v --exclude=web-monetization run build
      - *save_cache

  yarn-format-and-upkeep-diff-check:
    <<: *parameterized-node-version
    steps:
      - checkout
      - *restore_cache
      - *yarn_install
      - run:
          class: inner
          name: Yarn Dedupe Check
          command: |
            yarn dedupe --check
      - run:
          class: inner
          name: yarn dlx @yarnpkg/sdks vscode
          command: |
            yarn dlx @yarnpkg/sdks vscode
            git diff --exit-code -- . ':!yarn.lock' ':!.pnp.cjs'
      - run:
          class: inner
          name: Yarn format git diff --exit-code
          command: |
            yarn format
            yarn upkeep
            # yarn.lock sometimes (rarely) changes for unknown reasons
            # perhaps different versions of yarn ??
            # we don't *really* care so exclude it from the diff check
            git diff --exit-code -- . ':!yarn.lock' ':!.pnp.cjs'
      - run:
          class: inner
          name: Build generated code git diff --exit-code
          command: |
            yarn workspaces foreach -v --exclude=web-monetization run generate-code
            git diff --exit-code -- . ':!yarn.lock' ':!.pnp.cjs'
      - *save_cache

workflows:
  version: 2
  build:
    jobs: []
#      - build-safari
#      - lint-all:
#          <<: *node-version-matrix
#      - yarn-format-and-upkeep-diff-check:
#          <<: *node-version-matrix
#      - build-all-package-references-typescript:
#          <<: *node-version-matrix
#      - build-root-tsconfig:
#          <<: *just-latest-lts-node-version
#      - coil-extension-package:
#          <<: *node-version-matrix
#      - packages-build-scripts:
#          <<: *node-version-matrix
#      - jest-all:
#          filters:
#            branches:
#              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
#              ignore: /pull\/[0-9]+/
#          matrix:
#            parameters:
#              node-version: *node-versions
#              command: [ "test:coverage", "test:e2e:coverage" ]
#      - jest-workspaces-foreach-all:
#          filters:
#            branches:
#              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
#              ignore: /pull\/[0-9]+/
#          matrix:
#            parameters:
#              node-version: *node-versions
#              command: [ "test:coverage", "test:e2e:coverage" ]
#          <<: *node-version-matrix
